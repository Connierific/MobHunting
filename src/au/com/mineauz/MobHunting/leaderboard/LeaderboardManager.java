package au.com.mineauz.MobHunting.leaderboard;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.configuration.InvalidConfigurationException;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.scheduler.BukkitTask;

import au.com.mineauz.MobHunting.Messages;
import au.com.mineauz.MobHunting.MobHunting;
import au.com.mineauz.MobHunting.StatType;
import au.com.mineauz.MobHunting.storage.TimePeriod;

public class LeaderboardManager
{
	private Set<Leaderboard> mLeaderboards = new HashSet<Leaderboard>();
	private HashMap<String, Leaderboard> mNameMap = new HashMap<String, Leaderboard>();
	
	private BukkitTask mUpdater = null;
	
	public void initialize()
	{
		mUpdater = Bukkit.getScheduler().runTaskTimer(MobHunting.instance, new Updater(), 1L, MobHunting.config().leaderboardUpdatePeriod);
		load();
	}
	
	public void shutdown()
	{
		mUpdater.cancel();
	}
	
	public void createLeaderboard(String id, StatType type, TimePeriod period, Location pointA, Location pointB, boolean horizontal) throws IllegalArgumentException
	{
		if(mNameMap.containsKey(id.toLowerCase()))
			throw new IllegalArgumentException(Messages.getString("leaderboard.exists", "id", id)); //$NON-NLS-1$ //$NON-NLS-2$
		
		Leaderboard board = new Leaderboard(id, type, period, pointA, pointB, horizontal);
		mLeaderboards.add(board);
		mNameMap.put(id.toLowerCase(), board);
		board.updateBoard();
		save();
	}
	
	public void deleteLeaderboard(String id) throws IllegalArgumentException
	{
		if(!mNameMap.containsKey(id.toLowerCase()))
			throw new IllegalArgumentException(Messages.getString("leaderboard.notexists", "id", id)); //$NON-NLS-1$ //$NON-NLS-2$
		
		mLeaderboards.remove(mNameMap.remove(id.toLowerCase()));
		save();
	}
	
	public Set<Leaderboard> getAllBoards()
	{
		return Collections.unmodifiableSet(mLeaderboards);
	}
	
	public void save()
	{
		try
		{
			YamlConfiguration config = new YamlConfiguration();
			config.options().header("This file is automatically generated. Do NOT edit this file manually or you risk losing all leaderboards if you mistype something."); //$NON-NLS-1$
			
			ArrayList<Object> key = new ArrayList<Object>();
			
			for(Leaderboard leaderboard : mLeaderboards)
			{
				key.add(leaderboard.write());
			}
			
			config.set("boards", key); //$NON-NLS-1$
			
			config.save(new File(MobHunting.instance.getDataFolder(), "boards.yml")); //$NON-NLS-1$
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}
	
	@SuppressWarnings( "unchecked" )
	private void load()
	{
		try
		{
			File file = new File(MobHunting.instance.getDataFolder(), "boards.yml"); //$NON-NLS-1$
			
			if(!file.exists())
				return;
			
			YamlConfiguration config = new YamlConfiguration();
			config.load(file);
			
			List<Object> boards = (List<Object>) config.getList("boards"); //$NON-NLS-1$
			
			if(boards == null)
				return;
			
			mLeaderboards.clear();
			
			for(Object board : boards)
			{
				if(!(board instanceof Map))
					continue;
				
				Leaderboard leaderboard = new Leaderboard();
				leaderboard.read((Map<String, Object>)board);
				mLeaderboards.add(leaderboard);
				mNameMap.put(leaderboard.getId(), leaderboard);
			}
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		catch ( InvalidConfigurationException e )
		{
			e.printStackTrace();
		}
	}
	
	private class Updater implements Runnable
	{
		@Override
		public void run()
		{
			for(Leaderboard board : mLeaderboards)
				board.updateBoard();
		}
	}

	public Leaderboard getLeaderboard( String id )
	{
		return mNameMap.get(id.toLowerCase());
	}
}
